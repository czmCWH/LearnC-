using System;
namespace term01
{
    public class BoxingClass
    {
        public BoxingClass()
        {
        }

        /* 1、值类型和引用类型
         *
         * C# 语言中的所有类型都是由基类 System.Object 继承过来的，包括最常用的基础类型：int,byte,short,bool等，就是说所有的事物都是对象。
         * 如果声明这些类型的时候都在堆(HEAP)中分配内存，就会造成极低的效率！
         * 
         * .NET如何解决这个问题呢？正是通过将类型分成 值类型(value) 和 引用类型(regerencetype)。
         * C# 中定义的 值类型 包括 原类型(整型、bool、Decimal类型)、枚举(enum)、结构(struct)；引用类型 包括：类、数组、接口、委托、字符串等。
         * 值类型是在 栈 中分配内存，在声明的同时就初始化，以确保数据不为NULL；引用类型是在 堆 中分配内存，初始化为NULL。
         * 引用类型是需要系统的 GC(garbage collection) 来回收内存；值类型不用，超出了作用范围，系统就会自动释放。
         * 
         * 2、引用类型和值类型的区别
         * 
         * 值类型的变量直接存放实例数据；引用类型的变量是指向数据的内存块，并不是直接存放数据。
         * > 对于值类型，每个变量都有一份自己的数据复制，对另一个值类型变量的操作并不影响这一个变量的值。
         * > 对于引用类型，两个变量有可能引用同一个对象，因此对一个变量的操作会影响到另一个变量。
         * 
         * 值类型继承自 ValueType(注意：System.ValueType 继承自 System.Object)；引用类型继承自 System.Object。
         * 
         * 值类型有2种表示：装箱与拆箱；引用类型只有装箱一种形式。
         * 
         * 值类型是密封的(sealed)，因此值类型不能作为其他任何类型的基类，但是可以单继承或者多继承接口；而引用类型一般都有继承性。
         * 
         * 值类型变量不可以为null；引用类型变量默认情况下为 null，表示没有指向任何托管堆的引用地址。对值为 null的引用类型的任何操作，都会抛出 NullReferenceException异常。 
         * 
         */


        /* 3、装箱和拆箱
         * 
         * 装箱(boxing)和拆箱(unboxing) 是C#类型系统的核心概念。
         * 
         * 通过 装箱 和 拆箱 操作，能够在值类型和引用类型中架起一座桥梁。
         * 换言之，可以轻松的实现值类型与引用类型的相互转换，装箱和拆箱能够统一考察系统，任何类型的值最终都可以按照对象进行处理。
         * 
         * 装箱(boxing) 就是隐式的将一个值类型转换为引用类型的对象
         * 
         * 拆箱(unboxing) 就是将一个引用类型对象转换为任意值类型。
         */
        public void testBoxing()
        {
            int i = 11;

            // 装箱
            System.Object obj = i;

            // 拆箱
            int j = (int)obj;

            Console.WriteLine(i+", "+j);
        }

    }
}
